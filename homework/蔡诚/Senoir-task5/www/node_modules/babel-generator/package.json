{
  "_args": [
    [
      {
        "raw": "babel-generator@^6.24.1",
        "scope": null,
        "escapedName": "babel-generator",
        "name": "babel-generator",
        "rawSpec": "^6.24.1",
        "spec": ">=6.24.1 <7.0.0",
        "type": "range"
      },
      "/Users/decolo/Desktop/Senoir-task5/www/node_modules/babel-core"
    ]
  ],
  "_from": "babel-generator@>=6.24.1 <7.0.0",
  "_id": "babel-generator@6.24.1",
  "_inCache": true,
  "_location": "/babel-generator",
  "_nodeVersion": "6.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/babel-generator-6.24.1.tgz_1491578346993_0.8516181029845029"
  },
  "_npmUser": {
    "name": "hzoo",
    "email": "hi@henryzoo.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-generator@^6.24.1",
    "scope": null,
    "escapedName": "babel-generator",
    "name": "babel-generator",
    "rawSpec": "^6.24.1",
    "spec": ">=6.24.1 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/babel-core"
  ],
  "_resolved": "https://registry.npmjs.org/babel-generator/-/babel-generator-6.24.1.tgz",
  "_shasum": "e715f486c58ded25649d888944d52aa07c5d9497",
  "_shrinkwrap": null,
  "_spec": "babel-generator@^6.24.1",
  "_where": "/Users/decolo/Desktop/Senoir-task5/www/node_modules/babel-core",
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "dependencies": {
    "babel-messages": "^6.23.0",
    "babel-runtime": "^6.22.0",
    "babel-types": "^6.24.1",
    "detect-indent": "^4.0.0",
    "jsesc": "^1.3.0",
    "lodash": "^4.2.0",
    "source-map": "^0.5.0",
    "trim-right": "^1.0.1"
  },
  "description": "Turns an AST into code.",
  "devDependencies": {
    "babel-helper-fixtures": "^6.22.0",
    "babylon": "^6.11.0"
  },
  "directories": {},
  "dist": {
    "shasum": "e715f486c58ded25649d888944d52aa07c5d9497",
    "tarball": "https://registry.npmjs.org/babel-generator/-/babel-generator-6.24.1.tgz"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://babeljs.io/",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "amasad",
      "email": "amjad.masad@gmail.com"
    },
    {
      "name": "hzoo",
      "email": "hi@henryzoo.com"
    },
    {
      "name": "jmm",
      "email": "npm-public@jessemccarthy.net"
    },
    {
      "name": "loganfsmyth",
      "email": "loganfsmyth@gmail.com"
    },
    {
      "name": "sebmck",
      "email": "sebmck@gmail.com"
    },
    {
      "name": "thejameskyle",
      "email": "me@thejameskyle.com"
    }
  ],
  "name": "babel-generator",
  "optionalDependencies": {},
  "readme": "# babel-generator\n\n> Turns an AST into code.\n\n## Install\n\n```sh\nnpm install --save-dev babel-generator\n```\n\n## Usage\n\n```js\nimport {parse} from 'babylon';\nimport generate from 'babel-generator';\n\nconst code = 'class Example {}';\nconst ast = parse(code);\n\nconst output = generate(ast, { /* options */ }, code);\n```\n\n## Options\n\nOptions for formatting output:\n\nname                   | type     | default         | description\n-----------------------|----------|-----------------|--------------------------------------------------------------------------\nauxiliaryCommentBefore | string   |                 | Optional string to add as a block comment at the start of the output file\nauxiliaryCommentAfter  | string   |                 | Optional string to add as a block comment at the end of the output file\nshouldPrintComment     | function | `opts.comments` | Function that takes a comment (as a string) and returns `true` if the comment should be included in the output.  By default, comments are included if `opts.comments` is `true` or if `opts.minifed` is `false` and the comment contains `@preserve` or `@license`\nretainLines            | boolean  | `false`         | Attempt to use the same line numbers in the output code as in the source code (helps preserve stack traces)\nretainFunctionParens   | boolean  | `false`         | Retain parens around function expressions (could be used to change engine parsing behavior)\ncomments               | boolean  | `true`          | Should comments be included in output\ncompact                | boolean or `'auto'` | `opts.minified` | Set to `true` to avoid adding whitespace for formatting\nminified               | boolean  | `false`         | Should the output be minified\nconcise                | boolean  | `false`         | Set to `true` to reduce whitespace (but not as much as `opts.compact`)\nquotes                 | `'single'` or `'double'` | autodetect based on `ast.tokens` | The type of quote to use in the output\nfilename               | string   |                 | Used in warning messages\nflowCommaSeparator     | boolean  | `false`         | Set to `true` to use commas instead of semicolons as Flow property separators\njsonCompatibleStrings  | boolean  | `false`         | Set to true to run `jsesc` with \"json\": true to print \"\\u00A9\" vs. \"Â©\";\n\nOptions for source maps:\n\nname                   | type     | default         | description\n-----------------------|----------|-----------------|--------------------------------------------------------------------------\nsourceMaps             | boolean  | `false`         | Enable generating source maps\nsourceMapTarget        | string   |                 | The filename of the generated code that the source map will be associated with\nsourceRoot             | string   |                 | A root for all relative URLs in the source map\nsourceFileName         | string   |                 | The filename for the source code (i.e. the code in the `code` argument).  This will only be used if `code` is a string.\n\n## AST from Multiple Sources\n\nIn most cases, Babel does a 1:1 transformation of input-file to output-file.  However,\nyou may be dealing with AST constructed from multiple sources - JS files, templates, etc.\nIf this is the case, and you want the sourcemaps to reflect the correct sources, you'll need\nto make some changes to your code.\n\nFirst, each node with a `loc` property (which indicates that node's original placement in the\nsource document) must also include a `loc.filename` property, set to the source filename.\n\nSecond, you should pass an object to `generate` as the `code` parameter.  Keys\nshould be the source filenames, and values should be the source content.\n\nHere's an example of what that might look like:\n\n```js\nimport {parse} from 'babylon';\nimport generate from 'babel-generator';\n\nconst a = 'var a = 1;';\nconst b = 'var b = 2;';\nconst astA = parse(a, { filename: 'a.js' });\nconst astB = parse(b, { filename: 'b.js' });\nconst ast = {\n  type: 'Program',\n  body: [].concat(astA.body, ast2.body)\n};\n\nconst { code, map } = generate(ast, { /* options */ }, {\n  'a.js': a,\n  'b.js': b\n});\n\n// Sourcemap will point to both a.js and b.js where appropriate.\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babel/tree/master/packages/babel-generator"
  },
  "scripts": {},
  "version": "6.24.1"
}

{
  "_args": [
    [
      {
        "raw": "watchpack@^1.3.1",
        "scope": null,
        "escapedName": "watchpack",
        "name": "watchpack",
        "rawSpec": "^1.3.1",
        "spec": ">=1.3.1 <2.0.0",
        "type": "range"
      },
      "/Users/decolo/Desktop/Senoir-task5/www/node_modules/webpack"
    ]
  ],
  "_from": "watchpack@>=1.3.1 <2.0.0",
  "_id": "watchpack@1.3.1",
  "_inCache": true,
  "_location": "/watchpack",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/watchpack-1.3.1.tgz_1487784283426_0.4386741276830435"
  },
  "_npmUser": {
    "name": "sokra",
    "email": "tobias.koppers@googlemail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "watchpack@^1.3.1",
    "scope": null,
    "escapedName": "watchpack",
    "name": "watchpack",
    "rawSpec": "^1.3.1",
    "spec": ">=1.3.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webpack"
  ],
  "_resolved": "https://registry.npmjs.org/watchpack/-/watchpack-1.3.1.tgz",
  "_shasum": "7d8693907b28ce6013e7f3610aa2a1acf07dad87",
  "_shrinkwrap": null,
  "_spec": "watchpack@^1.3.1",
  "_where": "/Users/decolo/Desktop/Senoir-task5/www/node_modules/webpack",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/watchpack/issues"
  },
  "dependencies": {
    "async": "^2.1.2",
    "chokidar": "^1.4.3",
    "graceful-fs": "^4.1.2"
  },
  "description": "Wrapper library for directory and file watching.",
  "devDependencies": {
    "codecov.io": "^0.1.6",
    "coveralls": "^2.11.2",
    "eslint": "^2.9.0",
    "istanbul": "^0.4.3",
    "mocha": "^2.1.0",
    "rimraf": "~2.5.0",
    "should": "^8.3.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "7d8693907b28ce6013e7f3610aa2a1acf07dad87",
    "tarball": "https://registry.npmjs.org/watchpack/-/watchpack-1.3.1.tgz"
  },
  "files": [
    "lib/"
  ],
  "gitHead": "ebcdc813100168af1a61189403a8b1abfa5338a3",
  "homepage": "https://github.com/webpack/watchpack",
  "license": "MIT",
  "main": "./lib/watchpack.js",
  "maintainers": [
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    }
  ],
  "name": "watchpack",
  "optionalDependencies": {},
  "readme": "# watchpack\r\n\r\nWrapper library for directory and file watching.\r\n\r\n[![Build Status](https://travis-ci.org/webpack/watchpack.svg?branch=master)](https://travis-ci.org/webpack/watchpack) [![Build status](https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true)](https://ci.appveyor.com/project/sokra/watchpack/branch/master) [![Test coverage][coveralls-image]][coveralls-url]\r\n\r\n## Concept\r\n\r\nwatchpack high level API don't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\r\n\r\n* The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\r\n* A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\r\n* Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\r\n* The real watchers (currently chokidar) are created by the `DirectoryWatcher`.\r\n* Files are never watched directly. This should keep the watcher count low.\r\n* Watching can be started in the past. This way watching can start after file reading.\r\n* Symlinks are not followed, instead the symlink is watched.\r\n\r\n## API\r\n\r\n``` javascript\r\nvar Watchpack = require(\"watchpack\");\r\n\r\nvar wp = new Watchpack({\r\n\t// options:\r\n\taggregateTimeout: 1000\r\n\t// fire \"aggregated\" event when after a change for 1000ms no additonal change occured\r\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\r\n\r\n\tpoll: true\r\n\t// poll: true - use polling with the default interval\r\n\t// poll: 10000 - use polling with an interval of 10s\r\n\t// poll defaults to undefined, which prefer native watching methods\r\n\t// Note: enable polling when watching on a network path\r\n\r\n\tignored: /node_modules/,\r\n\t// anymatch-compatible definition of files/paths to be ignored\r\n\t// see https://github.com/paulmillr/chokidar#path-filtering\r\n});\r\n\r\n// Watchpack.prototype.watch(string[] files, string[] directories, [number startTime])\r\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\r\n// starts watching these files and directories\r\n// calling this again will override the files and directories\r\n\r\nwp.on(\"change\", function(filePath, mtime) {\r\n\t// filePath: the changed file\r\n\t// mtime: last modified time for the changed file\r\n});\r\n\r\nwp.on(\"aggregated\", function(changes) {\r\n\t// changes: an array of all changed files\r\n});\r\n\r\n// Watchpack.prototype.pause()\r\nwp.pause();\r\n// stops emitting events, but keeps watchers open\r\n// next \"watch\" call can reuse the watchers\r\n\r\n// Watchpack.prototype.close()\r\nwp.close();\r\n// stops emitting events and closes all watchers\r\n\r\n// Watchpack.prototype.getTimes()\r\nvar fileTimes = wp.getTimes();\r\n// returns an object with all know change times for files\r\n// this include timestamps from files not directly watched\r\n// key: absolute path, value: timestamp as number\r\n```\r\n\r\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\r\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack/watchpack.git"
  },
  "scripts": {
    "cover": "istanbul cover node_modules/mocha/bin/_mocha",
    "lint": "eslint lib",
    "precover": "npm run lint",
    "pretest": "npm run lint",
    "test": "mocha",
    "travis": "npm run cover -- --report lcovonly"
  },
  "version": "1.3.1"
}

{
  "_args": [
    [
      {
        "raw": "webpack-sources@^0.2.3",
        "scope": null,
        "escapedName": "webpack-sources",
        "name": "webpack-sources",
        "rawSpec": "^0.2.3",
        "spec": ">=0.2.3 <0.3.0",
        "type": "range"
      },
      "/Users/decolo/Desktop/Senoir-task5/www/node_modules/webpack"
    ]
  ],
  "_from": "webpack-sources@>=0.2.3 <0.3.0",
  "_id": "webpack-sources@0.2.3",
  "_inCache": true,
  "_location": "/webpack-sources",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/webpack-sources-0.2.3.tgz_1490398694081_0.5428378875367343"
  },
  "_npmUser": {
    "name": "sokra",
    "email": "tobias.koppers@googlemail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "webpack-sources@^0.2.3",
    "scope": null,
    "escapedName": "webpack-sources",
    "name": "webpack-sources",
    "rawSpec": "^0.2.3",
    "spec": ">=0.2.3 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webpack"
  ],
  "_resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-0.2.3.tgz",
  "_shasum": "17c62bfaf13c707f9d02c479e0dcdde8380697fb",
  "_shrinkwrap": null,
  "_spec": "webpack-sources@^0.2.3",
  "_where": "/Users/decolo/Desktop/Senoir-task5/www/node_modules/webpack",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/webpack-sources/issues"
  },
  "dependencies": {
    "source-list-map": "^1.1.1",
    "source-map": "~0.5.3"
  },
  "description": "Source code handling classes for webpack",
  "devDependencies": {
    "beautify-lint": "^1.0.3",
    "codecov.io": "^0.1.6",
    "coveralls": "^2.11.6",
    "eslint": "^1.1.0",
    "eslint-plugin-nodeca": "^1.0.3",
    "istanbul": "^0.4.1",
    "js-beautify": "^1.5.10",
    "mocha": "^2.3.4",
    "should": "^8.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "17c62bfaf13c707f9d02c479e0dcdde8380697fb",
    "tarball": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-0.2.3.tgz"
  },
  "files": [
    "lib/"
  ],
  "gitHead": "828a85acb96faf69c1ba0b78ba6d3a2acc9dcd92",
  "homepage": "https://github.com/webpack/webpack-sources#readme",
  "keywords": [
    "webpack",
    "source-map"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    },
    {
      "name": "spacek33z",
      "email": "kees@webduck.nl"
    },
    {
      "name": "thelarkinn",
      "email": "sean.larkin@cuw.edu"
    }
  ],
  "name": "webpack-sources",
  "optionalDependencies": {},
  "readme": "# webpack-sources\r\n\r\nContains multiple classes which represent a `Source`. A `Source` can be asked for source code, size, source map and hash.\r\n\r\n## `Source`\r\n\r\nBase class for all sources.\r\n\r\n### Public methods\r\n\r\nAll methods should be considered as expensive as they may need to do computations.\r\n\r\n#### `source`\r\n\r\n``` js\r\nSource.prototype.source() -> String\r\n```\r\n\r\nReturns the represented source code as string.\r\n\r\n#### `size`\r\n\r\n``` js\r\nSource.prototype.size() -> Number\r\n```\r\n\r\nReturns the size in chars of the represented source code.\r\n\r\n#### `map`\r\n\r\n``` js\r\nSource.prototype.map(options: Object) -> Object | null\r\n```\r\n\r\nReturns the SourceMap of the represented source code as JSON. May return `null` if no SourceMap is available.\r\n\r\nThe `options` object can contain the following keys:\r\n\r\n* `columns: Boolean` (default `true`): If set to false the implementation may omit mappings for columns.\r\n* `module: Boolean` (default `true`): If set to false the implementation may omit inner mappings for modules.\r\n\r\n#### `sourceAndMap`\r\n\r\n``` js\r\nSource.prototype.sourceAndMap(options: Object) -> {\r\n\tcode: String,\r\n\tmap: Object\r\n}\r\n```\r\n\r\nReturns both, source code (like `Source.prototype.source()` and SourceMap (like `Source.prototype.map()`). This method could have better performance than calling `source()` and `map()` separatly.\r\n\r\nSee `map()` for `options`.\r\n\r\n#### `updateHash`\r\n\r\n``` js\r\nSource.prototype.updateHash(hash: Hash) -> void\r\n```\r\n\r\nUpdates the provided `Hash` object with the content of the represented source code. (`Hash` is an object with an `update` method, which is called with string values)\r\n\r\n#### `node` (optional)\r\n\r\n``` js\r\nSource.prototype.node(options: Object) -> SourceNode\r\n```\r\n\r\nThis is an optional method. It may be `null` if not implemented.\r\n\r\nReturns a `SourceNode` (see source-map library) for the represented source code.\r\n\r\nSee `map()` for `options`.\r\n\r\n#### `listNode` (optional)\r\n\r\n``` js\r\nSource.prototype.listNode(options: Object) -> SourceNode\r\n```\r\n\r\nThis is an optional method. It may be `null` if not implemented.\r\n\r\nReturns a `SourceListMap` (see source-list-map library) for the represented source code.\r\n\r\nSee `map()` for `options`.\r\n\r\n## `RawSource`\r\n\r\nRepresents source code without SourceMap.\r\n\r\n``` js\r\nnew RawSource(sourceCode: String)\r\n```\r\n\r\n## `OriginalSource`\r\n\r\nRepresents source code, which is a copy of the original file.\r\n\r\n``` js\r\nnew OriginalSource(\r\n\tsourceCode: String,\r\n\tname: String\r\n)\r\n```\r\n\r\n* `sourceCode`: The source code.\r\n* `name`: The filename of the original source code.\r\n\r\nOriginalSource tries to create column mappings if requested, by splitting the source code at typical statement borders (`;`, `{`, `}`).\r\n\r\n## `SourceMapSource`\r\n\r\nRepresents source code with SourceMap, optionally having an additional SourceMap for the original source.\r\n\r\n``` js\r\nnew SourceMapSource(\r\n\tsourceCode: String,\r\n\tname: String,\r\n\tsourceMap: Object | String,\r\n\toriginalSource?: String,\r\n\tinnerSourceMap?: Object | String\r\n)\r\n```\r\n\r\n* `sourceCode`: The source code.\r\n* `name`: The filename of the original source code.\r\n* `sourceMap`: The SourceMap for the source code.\r\n* `originalSource`: The source code of the original file. Can be omitted if the `sourceMap` already contains the original source code.\r\n* `innerSourceMap`: The SourceMap for the `originalSource`/`name`.\r\n\r\n## `LineToLineMappedSource`\r\n\r\nRepresents source code, which is mapped line by line to the orginal file.\r\n\r\n``` js\r\nnew LineToLineMappedSource(\r\n\tsourceCode: String,\r\n\tname: String,\r\n\toriginalSource: String\r\n)\r\n```\r\n\r\n* `sourceCode`: The source code.\r\n* `name`: The filename of the original source code.\r\n* `originalSource`: The original source code.\r\n\r\n## `CachedSource`\r\n\r\nDecorates a `Source` and caches returned results of `map`, `source`, `size` and `sourceAndMap` in memory. Every other operation is delegated to the wrapped `Source`.\r\n\r\n``` js\r\nnew CachedSource(source: Source)\r\n```\r\n\r\n## `PrefixSource`\r\n\r\nPrefix every line of the decorated `Source` with a provided string.\r\n\r\n``` js\r\nnew PrefixSource(\r\n\tprefix: String,\r\n\tsource: Source\r\n)\r\n```\r\n\r\n## `ConcatSource`\r\n\r\nConcatenate mulitple `Source`s or strings to a single source.\r\n\r\n``` js\r\nnew ConcatSource(\r\n\t...items?: Source | String\r\n)\r\n```\r\n\r\n### Public methods\r\n\r\n#### `add`\r\n\r\n``` js\r\nConcatSource.prototype.add(item: Source | String)\r\n```\r\n\r\nAdds an item to the source.\t\r\n\r\n## `ReplaceSource`\r\n\r\nDecorates a `Source` with replacements and insertions of source code.\r\n\r\n### Public methods\r\n\r\n#### `replace`\r\n\r\n``` js\r\nReplaceSource.prototype.replace(\r\n\tstart: Number,\r\n\tend: Number,\r\n\treplacement: String\r\n)\r\n```\r\n\r\nReplaces chars from `start` (0-indexed, inclusive) to `end` (0-indexed, inclusive) with `replacement`.\r\n\r\nLocations represents locations in the original source and are not influenced by other replacements or insertions.\r\n\r\n#### `insert`\r\n\r\n``` js\r\nReplaceSource.prototype.insert(\r\n\tpos: Number,\r\n\tinsertion: String\r\n)\r\n```\r\n\r\nInserts the `insertion` before char `pos` (0-indexed).\r\n\r\nLocation represents location in the original source and is not influenced by other replacements or insertions.\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack/webpack-sources.git"
  },
  "scripts": {
    "beautify": "beautify-rewrite lib/**.js test/**.js",
    "beautify-lint": "beautify-lint lib/**.js test/**.js",
    "cover": "istanbul cover node_modules/mocha/bin/_mocha",
    "lint": "eslint lib test",
    "precover": "npm run lint && npm run beautify-lint",
    "pretest": "npm run lint && npm run beautify-lint",
    "publish-patch": "npm test && npm version patch && git push && git push --tags && npm publish",
    "test": "mocha --full-trace --check-leaks",
    "travis": "npm run cover -- --report lcovonly"
  },
  "version": "0.2.3"
}
